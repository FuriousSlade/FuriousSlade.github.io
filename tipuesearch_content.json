{"pages":[{"url":"http://furiousslade.github.io/posts/2016/pelican_swain.html","text":"Pelican-Swain No zuo no die, why you try ? You zuo you die, don't ask me why. 模板用别人的总是不太爽，还是自己作死写一个吧。 基本完成，总算是用上了自己的模板。大量抄袭了 Elegant ，Elegant是我用过功能最全面的Pelican theme了。 简介 使用了bootstrap3、fontawesome，评论使用disqus,站内搜索使用了tipuesearch。社交信息对QQ和微信做了处理：点击展示对应的二维码。 Live demo FuriouesSlade 注意事项 Swain/static/images/ 目录下存放了头像、favicon.ico、QQ和微信的二维码图片。使用时请自行更换。 Config demo # -*- coding: utf-8 -*- # from __future__ import unicode_literals AUTHOR = '' SITENAME = '' SITEURL = '' TIMEZONE = \"Asia/Shanghai\" DEFAULT_DATE_FORMAT = \"%Y-%m- %d \" ARTICLE_URL = 'posts/{date:%Y}/{slug}.html' ARTICLE_SAVE_AS = 'posts/{date:%Y}/{slug}.html' PAGE_URL = 'pages/{slug}' PAGE_SAVE_AS = 'pages/{slug}.html' CATEGORY_URL = 'category/{slug}' CATEGORY_SAVE_AS = 'category/{slug}.html' TAG_URL = 'tag/{slug}.html' TAG_SAVE_AS = 'tag/{slug}.html' DISPLAY_CATEGORIES_ON_SIDEBAR = True LOAD_CONTENT_CACHE = False PATH = u'content' BANNER_ALL_PAGES = True DEFAULT_LANG = u'zh' FILENAME_METADATA = \"(?P<slug>.*)\" # Feed generation is usually not desired when developing FEED_ALL_ATOM = None CATEGORY_FEED_ATOM = None TRANSLATION_FEED_ATOM = None AUTHOR_FEED_ATOM = None AUTHOR_FEED_RSS = None # Blogroll LINKS = (( 'Pelican' , 'http://getpelican.com/' ), ( 'Python.org' , 'http://python.org/' ), ( 'Jinja2' , 'http://jinja.pocoo.org/' ),) # Theme THEME = 'pelican-swain' DIRECT_TEMPLATES = ( ( 'index' , 'tags' , 'categories' , 'archives' , '404' , 'search' )) RECENT_ARTICLES_COUNT = 10 SOCIAL = (( 'email' , 'mailto:175439093@qq.com' ), ( 'weibo' , 'http://weibo.com/slade86' ), ( 'github' , 'https://github.com/FuriousSlade' ), ( 'qq' , '175439093' ), ( 'weixin' , 'w12046' ), ) # projects PROJECTS = [{ 'name' : 'Swain' , 'url' : 'https://github.com/FuriousSlade/Swain' , 'description' : 'Pelican Theme' }] MD_EXTENSIONS = ([ 'codehilite(css_class=highlight)' , 'extra' , 'toc' ]) ABOUT_ME = 'I am html' DEFAULT_PAGINATION = 10 USE_FOLDER_AS_CATEGORY = False # plugin config PLUGIN_PATHS = [ u'./pelican-plugins' ] PLUGINS = [ 'sitemap' , 'gzip_cache' , 'extract_toc' , 'tipue_search' , 'related_posts' , ] # relate_posts RELATED_POSTS_MAX = 3 # sitemap SITEMAP = { \"format\" : \"xml\" , \"priorities\" : { \"articles\" : 0.7 , \"indexes\" : 0.5 , \"pages\" : 0.3 , }, \"changefreqs\" : { \"articles\" : \"monthly\" , \"indexes\" : \"daily\" , \"pages\" : \"monthly\" , } } # disqus DISQUS_SITENAME = '' Screenshot","tags":"Blog","title":"用上了自己的模板pelican-swain。"},{"url":"http://furiousslade.github.io/posts/2016/charles_https.html","text":"APP在实际生产环境的部分追求安全性的接口都是https的。抓包工具一般情况下是无法抓取显示https接口调用内容的。这对一些线上问题的追踪产生了一定的障碍。 我一直在mac下使用Charles这个软件来进行抓包分析。Charles本身就是支持抓取https请求的。在一番折腾后成功抓取了https请求。 在此记录下过程： 首先你需要安装Charles，可以从它的官网下载 Charles 。 下载所需要使用到的 证书 . Version of Charles prior to v3.10 used a single SSL Root Certificate. You can still download the legacy certificate bundle here or the certificate itself here (for installing on mobile devices). Note that these certificates will not work on Charles v3.10. 在两个 here 处可以分别下载证书的压缩版本和可直接安装版本。 建议下载直接安装的证书到手机后，我使用的Android手机，进入\"设置\"-->\"安全\"-->\"从SD卡安装证书\"，找到下载好的证书并导入。 然后打开Charles进入Proxy-->SSL Proxying Settings中勾选Enable SSL Proxying,并添加需要抓取的的域名和端口（443）。 然后手机设置代理指向Mac，就可以开始抓取https请求了。 然而 (╯‵ □′ )╯︵┻━┻ 我高兴的太早了。。。并不是所有的APP发出的HTTPS请求都能被正确的抓取到。Charles抓取HTTPS使用的是 代理中间人攻击 方法，是可以有效的被防御的。 中间人攻击（Man-in-the-MiddleAttack，简称\"MITM攻击\"）是一种\"间接\"的入侵攻击，这种攻击模式是通过各种技术手段将受入侵者控制的一台计算机虚拟放置在网络连接中的两台通信计算机之间，这台计算机就称为\"中间人\"。 只要客户端在SSL协议握手时对服务器返回的证书做校验，伪造的证书就会被识别出来就GG了。 能抓到https请求的，说明APP就是 有BUG_(:з」∠)_ 有BUG_(:з」∠)_ 有BUG_(:з」∠)_ Charles抓取HTTPS请求的结果最终并不理想，但至少HTTPS请求是否会被中间人攻击也能作为一个测试点去关注。","tags":"Blog","title":"在Mac下使用抓包工具Charles抓取APP的Https请求。"},{"url":"http://furiousslade.github.io/posts/2016/2015_bug_prologue.html","text":"序 自从来到扎拉斯后工作中挖了不少坑也填了不少坑。在新的一年开始时，在此做下记录。 一次正常的请求，生产服务器上确实同时收到了多个请求。 在定位一个运营反馈的线上问题时，发现数据库中落下了两条除了主键ID外完全一样的数据。让开发查看日志后确实发现服务器的一个节点在同一个时间收到了多个相同的请求。因为这个接口本身是一个极低访问量的接口。当初程序设计时为了预留扩张功能，数据库并没有做唯一性索引。也并未加数据库锁表操作（锁表风险太大）\u0010，只是从程序逻辑上做了唯一性的限制\u0010。可以确定用户实际使用中确实只请求了一次，可能是因为网络抖动问题。造成服务器确实同时收到了相同的请求并成功落库。 因为该接口是一个低访问量的接口，最后为了在有预留可扩张功能的，又不锁表的前提下。使用了redis锁。通过redis来达到数据库操作锁的功能，来保证代码的逻辑上的唯一性限制能被正确的触发。而不会因为异常的并发问题造成数据异常。 分布式服务的定时任务造成了并发问题。 在生产环境上有一个job每天会定时去update数据，却发现部分数据被double了。在测试环境上这个功能是完全没有问题的，跑的很正确。因为是分布式服务，生产环境是集群服务造成了定时的job同时也跑了多个。同时去update数据，造成了部分数据被double了。因为读取数据库时间差的原因还有一定的运气因素也只是部分数据被double。不幸中的万幸。 从单个服务器来说这个job都是正确的，最终是依赖redis的分布式锁。来保证只有一台服务器的job会被正确执行。其他服务器的job在得知已有服务器在执行job后，会忽略该次job。 分布式服务同时收到大量的错误请求。 一次收到监控系统预警报告服务器收到大量的500请求。我们后续查看的服务器的日志发现几台通过nginx负载的服务器收到了大量的且相同的请求。这个请求是个异常请求，服务端也正确的捕获了异常，并根据接口约定，返回了相应的500错误。从程序逻辑上来说并没有问题。但诡异的是同一时间段所有负载机都收到了大量的会造成500错误的请求。触发了监控系统发出了警报。 之后跪了一发运维大哥。才知道运维大哥 \"新\" 配置了nginx的重试机制。当一台服务器请求失败后（500了），会向其他的负载机重试该次请求。结果就造成了，我们的服务器同时收到大量的会造成500的请求。nginx本来这个重试机制是一种容错手段。但却与我们的服务设计是冲突的。最后让运维大哥去掉该配置，皆大欢喜。 在测试环境测试通过的服务发布生产时tomcat报错，发布失败。 哎，有时候真是说不清楚。在alpha和beta两个独立的测试环境测试通过的代码。准备上线，推到线上服务器的时候tomcat一直起不来，大量的报错。当时真是郁闷，完全没有方向。让运维重启了tomcat服务后也没用。后来开发上生产服务器追踪日志才发现是jar包冲突引起的tomcat大量报错无法无法加载。本身我们的java是通过maven来管理jar包的，理论上依赖应该关系没问题。最后定为到是我们使用的公司公用的soa框架的中的jar包和我们自己项目使用的jar包产生了冲突。只是测试环境走了大运走了一个合理的加载过程顺利发布。而在发布生生环境时发生冲突。只能根据公司框架来调整jar包。最终上线。 对接的基础服务发布，造成我方调用大量404.对接的基础服务紧急回滚。 事情很简单，我们对接的基础服务项目进行了技术改造并在测试环境测试通过后发布生产，因为生产环境的配置没有正确的修改。造成依赖方访问大量404，在发现问题后立马回滚到上个可用版本。 在问题发生后我也反思过，作为一个被大量调用的基础服务。在大的技术改造发布时确实有很大的风险。一但发生问题影响面就很大。本身是做负载均衡的，可能是因为实际需要，他们发布时一口气发布了全部的服务器，造成了服务不可用。其实可以让运维配合先把一台服务器拉出集群，发布后验证服务可用后再加入集群，之后再全部发布或是依次发布。 生产环境上的bug在测试环境难以重现。 在之前的一些线上问题的debug时经常发现一些问题在测试环境是无法重现的。换句活来说就是测试环境时，测试是通过的。但生产上却产生了bug。对于这种问题，相信对于每个测试人员来说都是很头疼的。我遇到的问题主要还是测试环境的架构和生产不相同。各种基础服务的配置、nginx的配置、多服务器负载均都会造成这中情况。被坑了不少次，但基于客观条件也只能劲量保证测试环境和生产环境架构相同，性能差些就差些。尽量能够把跟多的问题在测试过程中发现解决。 开发基线分支选择错误造成修复的bug再次产生。 在测试前端的某个版本中发现过一个隐藏较深的bug，开发修复后并发布后生产后。因为紧急增加了一个功能点，加班测试发布后了紧急版本后。突然发现线上部分用户使用时出现异常问题。debug后是发现是之前的修复的bug重现了。最终定位到是开发作为基线的开发分支选择错误。之后选择了正确的基线分支，bug是很快修复并重新发版。这次问题测试没有做全回归，回归测试覆盖不全是问题之一。但也从侧面表现出代码管理的重要性。修复的bug因为基线分支选择错误而产生bug，作为测试真的觉得很心累。之后也发现我们这边前端的分支管理混乱也要求合理管理分支。改进分支管理后，此类问题并未再现。 终 其实对于所有线上的bug，测试都无法推脱说这是技术难点我没有责任，虽然不少问题测试确实很难发现，尤其是一些线程安全问题，并发性能问题。在快速的业务迭代中，往往没有那么多富裕的时间给测试。不过问题还是测试不充分造成的。只能在快速的业务迭代中和测试周期中努力找到一个好的平衡点。我认为开发的单元测试自测，就能从底层排除掉很多测试难以发现的问题。测试更该去关注集成测试、容错性、兼容性测试和性能测试，而不是操心单一模块是否可用，遇到好的队友还是很重要的。","tags":"Blog","title":"2015年踩过的坑"},{"url":"http://furiousslade.github.io/posts/2015/AppiumIOS_1.html","text":"Appium的安装 要实现ios自动化前提是有一台Mac OS X操作系统的设备可以是正统的mac或是黑苹果。然后去 appium官网 下载appium服务端。osx上不推荐使用命令行安装，因为命令行看装会缺失appium inspector这个重要的元素定位工具。建议使用dmg安装包安装appium。然后在安装相应的appium client，我用的是python。 pip install appium-python-client 来完成client的安装。 iOS演示Demo的创建 先安装 xcode 。因为没有开发者证书所以只能用ios模拟器来演示，在这里不多说了。从 https://github.com/appium/sample-code 上下载appium的演示DEMO。 下载后进入 sample-code/apps/TestApp 目录下 执行 xcodebuild -sdk iphonesimulator 来编译所需的TestApp。 看到 BUILD SUCCEEDED TestApp就编译成功了。 在 sample-code-master/sample-code/apps/TestApp/build/release-iphonesimulator 目录下可以看到TestApp.app就是后面所需要使用的app。 Appium的配置 启动appium,点击 苹果 图标。 点击\"Choose\",选择之前编译生成的TestApp.app。并选择模拟设备\"iPhone6\"，系统版本为\"8.3\"。最后再次点击苹果图标确认设置。 点击放大镜按钮，来启动appium inspector控件元素识别工具。 此时inspector工具和iOS模拟器会同时启动。使用inspector可以很方便的查看控件的各类属性。 测试代码 # coding=utf8 import pytest import sys from appium import webdriver import random class TestClass ( object ): '''初始化weddriver链接''' @classmethod def setup_class ( self ): desired_caps = {} # appium版本 desired_caps [ 'appium-version' ] = '1.4.1' # 平台为iOS desired_caps [ 'platformName' ] = 'iOS' # 自启动被测应用 desired_caps [ 'autoLaunch' ] = 'true' # iOS系统版本 desired_caps [ 'platformVersion' ] = '8.3' # 设备为iPhone模拟器 desired_caps [ 'deviceName' ] = 'iPhone Simulator' # 需要上传至iPhone模拟器的被测应用 desired_caps [ 'app' ] = \"/Users/slade/Downloads/sample-code-master/sample-code/apps/TestApp/build/release-iphonesimulator/TestApp.app\" # 创建webdriver链接 self . wd = webdriver . Remote ( 'http://0.0.0.0:4723/wd/hub' , desired_caps ) self . wd . implicitly_wait ( 30 ) # 等待元素出现时间为30秒 '''验证TestApp求和功能''' def test_one ( self ): text_one = random . randint ( 1 , 100 ) # 创建1-100随机数 text_two = random . randint ( 1 , 100 ) # 创建1-100随机数 # 对第一个输入框输入第一个随机数 self . wd . find_element_by_name ( \"TextField1\" ) . send_keys ( text_one ) # 对第二个输入框输入第二个随机数 self . wd . find_element_by_name ( \"IntegerB\" ) . send_keys ( text_two ) # 点击求和按钮 self . wd . find_element_by_name ( \"ComputeSumButton\" ) . click () # 确定TestApp的求和计算结果 answer = self . wd . find_element_by_name ( \"Answer\" ) . text # 断言TestApp求和功能是否正确 assert int ( answer ) == text_one + text_two '''释放webdriver链接''' @classmethod def teardown_class ( self ): self . wd . quit () if __name__ == '__main__' : # 使用了单元测试框架pytest作为驱动 pytest . main ( sys . argv [ 0 ] + ' -s' ) 执行","tags":"Blog","title":"基于Appium实现IOS自动化测试。"},{"url":"http://furiousslade.github.io/posts/2015/AdbError.html","text":"在命令行输入adb shell后输出如下错误： adb server is out of date. killing... ADB server didn't ACK * failed to start daemon * error: unknown host service 使用 netstat -ano 查看哪个程序占用了 5037 端口 活动连接 协议 本地地址 外部地址 状态 PID TCP 0.0.0.0:49154 0.0.0.0:0 LISTENING 1080 TCP 0.0.0.0:49163 0.0.0.0:0 LISTENING 588 TCP 0.0.0.0:49167 0.0.0.0:0 LISTENING 604 TCP 127.0.0.1:5037 0.0.0.0:0 LISTENING 972 TCP 127.0.0.1:5037 127.0.0.1:49382 TIME_WAIT 0 TCP 127.0.0.1:5354 0.0.0.0:0 LISTENING 1868 TCP 127.0.0.1:5354 127.0.0.1:49155 ESTABLISHED 1868 TCP 127.0.0.1:5354 127.0.0.1:49156 ESTABLISHED 1868 记录下 PID ： TCP 127.0.0.1:5037 0.0.0.0:0 LISTENING 972 使用 taskkill /F /PID 972 杀死占用进程 /F 为强制进行 C:\\Users\\Slade>taskkill /F /PID 972 成功: 已终止 PID 为 972 的进程。","tags":"Blog","title":"Adb error: unknown host service 的解决方法"},{"url":"http://furiousslade.github.io/posts/2015/ClientMonitor.html","text":"起因 在测试一款通话类APP时，需要精确的统计客户端的流量消耗，电量消耗，CPU，内存等指标。磕磕碰碰的最终还是顺利的完成。在测试Android客户端的程中我一开始使用了Android SDK中的DDMS工具。 DDMS ddms位于\"D:\\adt-bundle-windows-x86\\sdk\\tools\"相似的目录下。运行ddms.bat 选择相应的应用进程例如：com.paobao.verytele 选择Network标签。可以看到该进程网络统计模块。 RX 为下行数据， TX 为上行数据。可选择统计数据的时间间隔（250ms），点击Start，就会开始采集数据。 因为DDMS使用起来并不是最符合我的需求，所以在这里只做简单的介绍，具体功能可以自己挖掘。 Emmagee 最终Android端我选择了网易开源项目 Emmagee 。支持中文，简单直观的选择应用开启统计，可设置采集间隔，并可以设置将报告发送至指定邮箱。报告为Excel格式，统计了APP的CPU、内存、流量、电量以及整体性能状态。 GT iOS端的性能监测工具找到了腾讯的项目 GT 。GT本身支持Android和iOS双平台，不过Android没有Emmagee更易用而已。iOS端是一个Framework包，必须嵌入APP工程。我让开发帮我集成进了APP中，同样可以统计APP的CPU、内存、流量、电量以及整体性能状态。","tags":"Blog","title":"移动客户端的性能监控。"},{"url":"http://furiousslade.github.io/posts/2015/Robotium.html","text":"package com . example . tt . test ; import com.robotium.solo.Solo ; import android.app.Activity ; import android.provider.UserDictionary.Words ; import android.test.ActivityInstrumentationTestCase2 ; import android.view.View ; @SuppressWarnings ( \"rawtypes\" ) public class TestVs extends ActivityInstrumentationTestCase2 { public Solo solo ; public Activity activity ; private static Class < ? > launchActivityClass ; private static String mainActiviy = \"com.paobao.verysercall.activity.LogoActivity\" ; private static String packageName = \"com.paobao.verysercall\" ; static { try { launchActivityClass = Class . forName ( mainActiviy ); } catch ( ClassNotFoundException e ){ throw new RuntimeException ( e ); } } @SuppressWarnings ({ \"unchecked\" , \"deprecation\" }) public TestVs () { super ( packageName , launchActivityClass ); } @Override protected void setUp () throws Exception { super . setUp (); this . activity = this . getActivity (); this . solo = new Solo ( getInstrumentation (), getActivity ()); } /* public void testCountryCode () throws Exception { solo . waitForText ( \"快速注册\" , 1 , 1000 ); solo . clickOnText ( \"国家和地区\" ); solo . clickOnText ( \"+30\" ); View view = null ; view = solo . getView ( \"android:id/action_bar\" ); solo . waitForView ( view ); boolean foundcode = solo . searchText ( \"+30\" ); assertTrue ( \"Country code is not found\" , foundcode ); solo . clickOnText ( \"+30\" ); solo . clickOnText ( \"+86\" ); view = solo . getView ( \"android:id/action_bar\" ); foundcode = solo . searchText ( \"+86\" ); assertTrue ( \"Country code is not found\" , foundcode ); } public void testLogInCaseOne () throws Exception { solo . waitForText ( \"下一步\" , 1 , 1 ); solo . clickOnEditText ( 0 ); solo . enterText ( 0 , \"73761000864\" ); solo . clickOnText ( \"下一步\" ); boolean findToast = solo . waitForText ( \"验证码发送失败！\" ); assertTrue ( \"手机号码格式错误，不该发送验证码。\" , findToast ); } public void testLogInCaseTwo () throws Exception { solo . waitForText ( \"下一步\" , 1 , 1 ); solo . clickOnEditText ( 0 ); solo . enterText ( 0 , \"13761000864\" ); solo . clickOnText ( \"下一步\" ); boolean findToast = solo . waitForText ( \"短信验证码发送成功\" ); assertTrue ( \"验证码发送失败\" , findToast ); boolean tmpText = solo . waitForText ( \"重新获取\" ); assertTrue ( tmpText ); solo . enterText ( 0 , \"1234\" ); solo . clickOnText ( \"下一步\" ); solo . waitForText ( \"通话记录\" ); } */ public void testMePage () throws Exception { solo . clickOnText ( \"我\" ); solo . waitForText ( \"我\" , 2 , 10 ); solo . waitForText ( \"剩余时间\" ); solo . waitForText ( \"用户\" ); solo . waitForText ( \"充值\" ); solo . waitForText ( \"面对面分享\" ); solo . waitForText ( \"关于VerySecret\" ); solo . waitForText ( \"退出当前账号\" ); } /* public void testLogOut () throws Exception { solo . clickOnButton ( \"我\" ); solo . clickOnButton ( \"退出当前帐号\" ); solo . clickOnButton ( \"确定\" ); solo . waitForText ( \"快速注册\" ); } */ @Override public void tearDown () throws Exception { try { this . solo . finishOpenedActivities (); } catch ( Throwable e ) { e . printStackTrace (); this . activity . finish (); super . tearDown (); } } }","tags":"Blog","title":"Robotium只有apk情况下的代码片段。"},{"url":"http://furiousslade.github.io/posts/2015/Jpype.html","text":"# coding:utf-8 # 使用jpype第三方库创建jvm使用java类 import jpype class MyDes : @staticmethod # 建立静态方法 def encode ( data ): # 读取系统jvm环境变量 jvmPath = jpype . getDefaultJVMPath () # 设置javaClass文件路径,可以是一个jar包 classpath = \"D: \\\\ git \\\\ VeryTeleTest \\\\ JavaServer\" jvmArg = \"-Djava.class.path=\" + classpath # 尝试开启jvm if not jpype . isJVMStarted (): jpype . startJVM ( jvmPath , jvmArg ) # 开启多线程支持 jpype . attachThreadToJVM () # 导入MyDes.class(DES加密模块) javaClass = jpype . JClass ( \"MyDes\" ) key1 = \"xxxxxxxxxxxxxxxxx\" # 秘钥1 key2 = \"xxxxxxxxxxxxxxxxx\" # 秘钥2 return javaClass . encode ( data , key1 , key2 ) # 使用MyDes.encode方法进行加密 @staticmethod # 建立静态方法 def decode ( data ): # 读取系统jvm环境变量 jvmPath = jpype . getDefaultJVMPath () # 设置javaClass文件路径,可以是一个jar包 classpath = \"D: \\\\ git \\\\ VeryTeleTest \\\\ JavaServer\" jvmArg = \"-Djava.class.path=\" + classpath # 尝试开启jvm if not jpype . isJVMStarted (): jpype . startJVM ( jvmPath , jvmArg ) # 开启多线程支持 jpype . attachThreadToJVM () # 导入MyDes.class(DES加密模块) javaClass = jpype . JClass ( \"MyDes\" ) key1 = \"xxxxxxxxxxxxxxxxx\" # 秘钥1 key2 = \"xxxxxxxxxxxxxxxxx\" # 秘钥2 return javaClass . decode ( data , key1 , key2 ) # 使用MyDes.decode方法进行加密","tags":"Blog","title":"Python调用Java的代码片段。"},{"url":"http://furiousslade.github.io/posts/2015/AutoStartOnLinux.html","text":"起因 最近因为机房经常停电，导致服务器频繁重启。每次都要手动去启动Redmine，我懒。所以把启动redmine的过程加入到了Linux系统启动过程中。 我使用的是CentOS 6.5 方法 1： 可能因发行版本不同rc.local的位置可能有不同 vim /etc/rc.local 在用户登录前执行，权限大。但无法使用\"~\"作为路劲，因为用户尚未登录，没有用户主目录。可以在/var/log/boot.log看到日志 方法 2： sudo vi /etc/profile 权限等同当前登录用户，有可能会有权限不足的问题。可以用'~'指定主目录。 实现Redmine随Linux系统自启动 编辑 /etc/rc.local 文件 vim /etc/rc.local 添加如下字段，因为启用Redmine必须先启动Mysql，所以把Mysql的启动也加了进去。 service mysqld start cd /var/www/redmine/ rails server Mongrel -d -e production -b 0.0.0.0 -p 3000 之后再断电就不用手工启动服务了。机房断电太坑了。","tags":"Blog","title":"让Redmine随Linux系统自动启动。"},{"url":"http://furiousslade.github.io/posts/2015/AppiumIOS.html","text":"# coding:utf-8 from appium import webdriver import time import os import time success = True desired_caps = {} desired_caps [ 'appium-version' ] = '1.0' desired_caps [ 'platformName' ] = 'iOS' desired_caps [ 'autoLaunch' ] = 'true' desired_caps [ 'platformVersion' ] = '8.1.2' desired_caps [ 'deviceName' ] = 'TestIphone6' desired_caps [ 'bundleId' ] = 'io.appium.TestApp' desired_caps [ 'udid' ] = 'd67350bd7dc62308dea8e919803441128cb11745' wd = webdriver . Remote ( 'http://0.0.0.0:4723/wd/hub' , desired_caps ) wd . implicitly_wait ( 10 ) def is_alert_present ( wd ): try : wd . switch_to_alert () . text return True except : return False try : wd . find_element_by_name ( \"TextField1\" ) . send_keys ( \"1\" ) wd . find_element_by_name ( \"IntegerB\" ) . send_keys ( \"2\" ) wd . find_element_by_name ( \"ComputeSumButton\" ) . click () time . sleep ( 5 ) finally : wd . quit () if not success : raise Exception ( \"Test failed.\" )","tags":"Blog","title":"Appium在iOS端实现的脚本片段。"},{"url":"http://furiousslade.github.io/posts/2015/InstallMongrel.html","text":"由于Redmine自带的Webrick Web服务器发布的问题，需要使用Mongrel组件来替换Webrick。Mongrel是一种快速的针对Ruby的Http服务器，专门为部署发布ROR应用而产生的。Mongrel相比Rails自带的纯Ruby服务器Webrick速度快很多并支持并发访问，有望成为Ruby的Tomcat. 替换其自带的服务器webrick为mongrel，方法： gem install mongrel rails 3.1以上执行: gem install mongrel –pre 修改redmine下gemfile，在gemfile中加入： gem 'mongrel' 如果安装的mongrel pre， 则gemfile中加: gem 'mongrel','~> 1.2.0.pre2' 删除gemfile.lock文件，重新执行: bundle install 执行 ruby script/rails server mongrel -e production","tags":"Blog","title":"Redmine使用Mongrel服务器。"},{"url":"http://furiousslade.github.io/posts/2015/InstallRedmine.html","text":"Install Redmine on Centos 65 dependencies packages These are the basic software packages for environment settings and utility tools to compile other packages in the next section. Copy the block command and execute in the Putty Windows : This is a long command line, copy all and implementation. yum -y install nano zip unzip libyaml-devel zlib-devel curl-devel openssl-devel httpd-devel apr-devel apr-util-devel mysql-devel gcc ruby-devel gcc-c++ make postgresql-devel ImageMagick-devel sqlite-devel perl-LDAP mod_perl perl-Digest-SHA Install Apache and MySQL Apache is a server application for communicating over the HTTP protocol. Apache runs on operating systems such as Unix, Linux, Microsoft Windows, and other operating systems. Apache play an important role in the development of the internet and the world wide web. MySQL is the database management free open source most popular on the world, MySQL has high speed, stability and ease of use, portability, operating on multiple operating systems offer a large system is very powerful utility functions. With the speed and high security, MySQL is well suited for applications that access databases on the internet. Use the following command to install : yum -y install httpd mysql mysql-server Allow start services when OS boot : chkconfig httpd onchkconfig mysqld onservice httpd startservice mysqld start Set the password for MySQL /usr/bin/mysql_secure_installation Because we not have a password for the root account so you press Enter to skip. Enter current password for root (enter for none): Select Yes to set the password for the MySQL root account. Set root password? [Y/n] y Enter and confirm your password, remove the anonymous user, select Yes Remove anonymous users? [Y/n] y Allow remote login to MySQL as root account, select No. Disallow root login remotely? [Y/n] n Delete the test database, select Yes Remove test database and access to it? [Y/n] y Reload privilege tables, select Yes Reload privilege tables now? [Y/n] y Turn off SELinux SELinux is a security feature advanced for Linux operating system, when installing the system you need to turn off this feature to get the process done smoothly, after successful you can turn on back if you want. nano /etc/selinux/config Change the file content : SELINUX=disabled Press CTRL + O to save the file and press CTRL + X to exit. Set up the Hostname By default when installing a new OS Centos not set the hostname, so we need to setting with the command : nano /etc/hosts Add your domain name or host name that you set on both the command line, save the file and exit, the server name will be changed when restarting. Configuring the Firewall We do not want to turn off the firewall because it's quite important, so you need to add rules to allow port 80 for HTTP and port 443 for HTTPS. In the Centos OS, you can configuration firewall by editing files iptables and ip6tables. nano /etc/sysconfig/iptables Press Enter to create a new line after the line of port 22, copy the following two commands and right click on the window to the Paste command. -A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT-A INPUT -m state --state NEW -m tcp -p tcp --dport 443 -j ACCEPT Press CTRL + O to save the file and press CTRL + X to exit. The same applies for IP6 firewall : nano /etc/sysconfig/ip6tables Add these lines to the file. -A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT-A INPUT -m state --state NEW -m tcp -p tcp --dport 443 -j ACCEPT After you finish editing both files, run the commands to apply the new rules for firewall. /etc/init.d/iptables restart/etc/init.d/ip6tables restart Allow turn on the firewall when reboot the operating system. chkconfig iptables onchkconfig ip6tables on Finally, we need to restart the system to apply the changes to the SELinux and Hostname. reboot Install Ruby Ruby is a object-oriented programming language, capable of reflection. Syntax inherited from Ada and Perl with object-oriented features of Smalltalk, and also share some features with Python, Lisp, Dylan and CLU, Ruby is a single phase interpreter. Ruby provides programming patterns, including functional programming, object-oriented, imperative, reflective, it uses dynamic variable and automatic memory management. Install Ruby interpreter with version management program RVM. \\curl -L https://get.rvm.io | bash After successful, we will launch RVM source /etc/profile.d/rvm.sh The following command will list the versions of Ruby to install : rvm list known We choose the stable version [ruby-] 1.9.3 [-p545], and execute the following command : rvm install 1.9.3 The installation process is pretty long time, but you do not need any intervention, after successful, you check with the following command : ruby -v Install Rubygems Rubygems is a Ruby's packages management program, very popular in applications written by Ruby language and the Ruby On Rails framework. yum -y install rubygems Install Passenger The full name of the Passenger is Phusion Passenger, known as mod_rails or mod_rack, it is a web application intergrate with Apache and it can operate as a standalone web server support for the Ruby On Rails applications. Execute the following commands : gem install passengerpassenger-install-apache2-module After completed, we copy a notification block in the window to create the configuration file in the next steps (select block notification and press C to copy). LoadModule passenger_module /usr/local/rvm/gems/ruby-1.9.3-p545/gems/passenger-4.0.37/buildout/apache2/mod_passenger.so PassengerRoot /usr/local/rvm/gems/ruby- 1.9.3-p545/gems/passenger- 4.0.37 PassengerDefaultRuby /usr/local/rvm/gems/ruby- 1.9.3-p545/wrappers/ruby Create a new virtual host file for Passenger : nano /etc/httpd/conf.d/passenger.conf Paste the command blocks into the empty file and save it, then restart the Apache service. service httpd restart Create Database for Redmine Use MySQLAdmin to create an empty database for Redmine, saved password to fill in the configuration file in the next steps. mysql --user=root --password=root_password_mysqlcreate database redmine_db character set utf8;create user 'redmine_admin'@'localhost' identified by 'your_new_password';grant all privileges on redmine_db.* to 'redmine_admin'@'localhost';quit; Install Redmine Redmine is a main program of the project management system, we will download and install the program from the website of Redmine. Download Redmine version 2.5.x to directory \"/var/www\" on the Centos OS. cd /var/wwwwget http://www.redmine.org/releases/redmine-2.5.0.tar.gz Extract the folder and rename directory tar xvfz redmine-2.5.0.tar.gzmv redmine-2.5.0 redminerm -rf redmine-2.5.0.tar.gz Configuring the Database The next, we need to configure the database was created from the above steps. cd /var/www/redmine/configcp database.yml.example database.ymlnano database.yml Enter name for database, enter username and password of the database. Press CTRL + O to save the file and CTRL + X to exit. Setting up Rails Install the package library support for Rails using the Bundle. cd /var/www/redminegem install bundlerbundle installrake generate_secret_token The next, we create the database table for the Redmine application. RAILS_ENV=production rake db:migrateRAILS_ENV=production rake redmine:load_default_data Activate FCGI cd /var/www/redmine/publicmkdir plugin_assetscp dispatch.fcgi.example dispatch.fcgicp htaccess.fcgi.example .htaccess Setting up Apache and FastCGI cd / var / www / rpm -- import https : // fedoraproject . org / static / 060 8 B895 . txtwget http : // dl . fedoraproject . org / pub / epel / 6 / x86_64 / epel - release - 6 - 8. noarch . rpmrpm - ivh epel - release - 6 - 8. noarch . rpmyum - y install mod_fcgidrm - rf epel - release - 6 - 8. noarch . rpm Creating Files Directory This directory contains data files generated during the operation of Redmine as document or image file, we create a new directory in the \"/opt\". mkdir -p /opt/redmine/fileschown -R apache:apache /opt/redminecd /var/www/redmine/configcp configuration.yml.example configuration.ymlnano configuration.yml Enter the directory path containing the data files you just created in the previous step into the line \"attachments_storage_path\". Note: You must add a space at the begin of the path \"/opt/redmine/files\" after character \":\" Configuring Email Another very important function of Redmine is using email to notify members when the contents of each project changes, Redmine can use many different methods to send email that is Sendmail, SMTP, GMail ... To configure the email we will edit the configuration file. nano /var/www/redmine/config/configuration.yml The simplest is you use features of the default SendMail in the Centos OS by settings : email_delivery:delivery_method: :sendmail Note : Do not use the Tab key to indent when editing the configuration file, you need to use the space bar on the keyboard. If you use GMail's SMTP, you need to register an email account with the login methods used password normal and disable two-step authentication by smart phone. Enter your Gmail account as below : email_delivery : delivery_method : : smtp smtp_settings : enable_starttls_auto : true address : \"smtp.gmail.com\" port : 587 domain : \"smtp.gmail.com\" authentication : : plain user_name : \"your_email@gmail.com\" password : \"your_password\" Save the file configuration and exit. Create Virtual Host for Redmine Create an Apache configuration file for the Redmine application at the port 80. nano /etc/httpd/conf.d/redmine.conf Copy the text below and paste into the editor window, note the information to change your domain name. 80> ServerName your_domain ServerAdmin your_domain @domain.com DocumentRoot /var/www/redmine/public/ ErrorLog logs/redmine_error_log \"/var/www/redmine/public/\"> Options Indexes ExecCGI FollowSymLinks Order allow,deny Allow from all AllowOverride all Save the file configuration and exit. Running Redmine Before execute Redmine in the first time, we must permission for the directory installed Redmine and restart Apache service. cd /var/wwwchown -R apache:apache redminechmod -R 755 redmineservice httpd restart Redmine will run at the following address URL : http://your-domain Login to system with an administrator account : admin / admin You can change your password after successful login. We can see Redmine has running but very primitive, in the next steps we will install the support plugins and customized Redmine to use professional. Install Subversion Subversion, also known as SVN, it is a version management system is very popular and easy to use, most programmers can use it competently. We need to create a folder to store data for Redmine, the following command creates a directory and permissions for the Apache service. mkdir -p /opt/repositories/svnchown -R apache:apache /opt/repositories/chmod 0755 /opt/repositories The following command install Subversion and the packages : yum install mod_dav_svn subversion subversion-ruby The next, we will create a directory and copy the file called \"Redmine.pm\", it responsible for interface data repository with Redmine and it is written by Perl language programming. mkdir /usr/lib64/perl5/vendor_perl/Apacheln -s /var/www/redmine/extra/svn/Redmine.pm /usr/lib64/perl5/vendor_perl/Apache/Redmine.pm Note : If you are using 32 bit Centos, change the path \"/usr/lib64\" to \"/usr/lib\" After installation is complete, from the Redmine application, go to the page Administration> Settings> Repositories to check the results. To support the authentication and access to data repository for each member, we need to create a virtual host for the Apache service can access Redmine database. nano /etc/httpd/conf.d/subversion.conf Add the following lines to the end and still retain the old contents of the file : PerlLoadModule Apache::Redmine DAV svn SVNParentPath \"/opt/repositories/svn\" SVNListParentPath on Order deny , allow Deny from all Satisfy any LimitXMLRequestBody 0 SVNPathAuthz off PerlAccessHandler Apache : :Authn : :Redmine : :access_handler PerlAuthenHandler Apache : :Authn : :Redmine : :authen_handler AuthType Basic AuthName \"Subversion Repository\" Require valid-user RedmineDSN \"DBI:mysql:database=redmine_db;host=localhost:3306\" RedmineDbUser \"redmine_admin\" RedmineDbPass \"your_password_database_redmine\" Note : You need to change the password in the \"RedmineDbPass\" to correct the database password of Redmine. At this point, we have finished the basic settings for Redmine. Thank you!","tags":"Blog","title":"Install Redmine on Centos."},{"url":"http://furiousslade.github.io/posts/2015/NoCpUseCat.html","text":"在Android shell 下可能并没有安装cp命令，一般都不会安装。需要的可以自己安装busybox工具。在紧急的情况下可以使用cat命令来代替cp。 adb shell cd /mnt/sdcard cat xxx.apk >> yyy.apk # 将/mnt/sdcard目录下的xxx.apk复制为yyy.apk Busybox 是一个集成了一百多个最常用linux命令和工具的软件。需要选择适合你手机cpu的版本来安装。查看手机CPU信息，根据Processor来选择安装版本。 cat /proc/cpuinfo Processor : ARMv7 Processor rev 2 (v7l) ... 将busybox复制到 /system/xbin 目录下，并修改文件权限，使其可执行。 cat busybox-armv7l >> /system/xbin/busybox chmod 775 busybox busybox --install 大功告成，现在就可以在Android shell下使用常用的linux命令了。","tags":"Blog","title":"在Android shell下无法使用cp命令的解决方案。"},{"url":"http://furiousslade.github.io/posts/2015/ReadOnlyFileSystem.html","text":"问题 当往android的/system目录下拷贝文件时一般是会报\"Read-only file system\"。因为/system目录默认是只读的。 解决方法 首先是获取手机的 root权限 后 adb shell su # 切换成ROOT用户 mount -o rw,remount /system #将/system目录设置为读写模式 mount -o ro,remount /system #将/system目录设置为只读模式","tags":"Blog","title":"解决Android复制文件报\"Read-only file system\"的问题。"},{"url":"http://furiousslade.github.io/posts/2015/RedmineEmail.html","text":"当Redmine配置邮件后，会发现提交Bug等操作响应缓慢。是因为Redmine在确定邮件发送完成后才会返回提交成功的页面。设置成异步发送邮件，操作流程就流畅了。 vim /var/www/redmine/config/configuration.yml delivery_method：async_smtp or delivery_method : async_sendmail","tags":"Blog","title":"Redmine异步发送邮件。"},{"url":"http://furiousslade.github.io/posts/2015/adbmore.html","text":"常用命令 adb devices # 查看已连接PC的终端 adb shell # 连接终端 adb -s [devicesId] shell # 多台设备根据设备号连接终端 adb push xxx.apk /mnt/sdcard/xxx.apk # 将本地文件传送至手机 adb pull /mnt/sdcard/xxx.apk xxx.apk # 将手机中的文件传送至本地","tags":"Blog","title":"Adb常用命令。"},{"url":"http://furiousslade.github.io/posts/2015/BlogStart.html","text":"Blog前期的搭建终于完成。可以开始装逼之旅了，作为一个IT人没有自己的博客总觉得有点low。建立博客的初衷是为了学习和记录，逼格的提升是次要的（xxx：骗谁啊！？）。 我最终选择了 Pelican + github 的组合。 之所以选择了Pelican没有选择Jekyll因为工作本身用 Python 较多,非常喜欢Python的语法结构，爱屋及乌。 Pelican选择了 elegant 这个皮肤，功能非常的齐全。可惜Pelican自带的站内搜索插件调试了多次都失败了。最后选用了 Swiftype 作为站内搜索。从网上搞了段代码实现了 返回顶部 的功能。使用Cygwin解决了Windows系统下的使用无法使用make的问题。 在这个过程中接触了html、css、JavaScript、模板语法、markdown语法、git、github。","tags":"Blog","title":"Blog Start!"}]}